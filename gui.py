# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'guiv2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QLabel, QGraphicsPixmapItem
import numpy
import math
from PyQt5.QtGui import QPixmap


### Define solar power systems
# Data taken for 15-yr

XTJ_PRIME = {
    'Solar_type' : 'XTJ_PRIME Spectrolab',
    'Degradation' : 0.87, # %
    'Voc_BOL' : 2.720,
    'Jsc_BOL' : 18.0,
    'Vmp_BOL' : 2.406,
    'Jmp_BOL' : 17.5,
    'Voc' : 0.88, # V
    'Jsc' : 0.99, # mA/cm2
    'Vmp' : 0.89, # V
    'Jmp' : 0.98, # mA/cm2
    'Voc_T_BOL' : -5.6, # mV/C
    'Jsc_T_BOL' : 10.0, # mA/cm2/C
    'Vmp_T_BOL' : -6.3, # mV/C
    'Jmp_T_BOL' : 5.0, # uA/cm2/C
    'Voc_T_EOL' : -6.4, # mV/C
    'Jsc_T_EOL' : 10.8, # mA/cm2/C
    'Vmp_T_EOL' : -6.6, # mV/C
    'Jmp_T_EOL' : 9.5, # uA/cm2/C
    'Absorptance' : 0.88,
    'Emittance' : 0.85,
    'Solar_size' : 27.0, # cm2
    'Packing_eff' : 0.90, # %
    'Mass_cell' : 67*0.000001, #kg/cm2
    'Efficiency_BOL' : 0.307, #%
    'Efficiency_EOL' : 0.307*0.87 # %
}

AZUR_SPACE = {
    'Solar_type' : '4G32C-Adv, AZUR Space',
    'Degradation' : 0.9, # %
    'Voc_BOL' : 3.451,
    'Jsc_BOL' : 15.16,
    'Vmp_BOL' : 3.025,
    'Jmp_BOL' : 14.36,
    'Voc' : 0.94, # V
    'Jsc' : 0.99, # mA/cm2
    'Vmp' : 0.92, # V
    'Jmp' : 0.98, # mA/cm2
    'Voc_T_BOL' : -8.4, # mV/C
    'Jsc_T_BOL' : 2.11, # mA/cm2/C
    'Vmp_T_BOL' : -8.6, # mV/C
    'Jmp_T_BOL' : 0.9, # uA/cm2/C
    'Voc_T_EOL' : -8.9, # mV/C
    'Jsc_T_EOL' : 4.22, # mA/cm2/C
    'Vmp_T_EOL' : -9.0, # mV/C
    'Jmp_T_EOL' : 2.11, # uA/cm2/C
    'Absorptance' : 0.91,
    'Emittance' : 0.85,
    'Solar_size' : 30.18, # cm2
    'Packing_eff' : 0.90, # %
    'Mass_cell' : 59*0.000001, #kg/cm2
    'Efficiency_BOL' : 0.318, #%
    'Efficiency_EOL' : 0.287, # %
}


SOLARARRAY_SYSTEM = [
    (XTJ_PRIME,'XTJ_PRIME'),
    (AZUR_SPACE,'AZUR_SPACE')
]

### Define power systems
UNREG_DET = 'UNREG_DET'
REG_DET = 'REG_DET'
REG_UNREG_DET = 'REG_UNREG_DET'
NON_DET = 'NON_DET'

POWERSYSTEM_TYPE = [
    (UNREG_DET, 'UNREG_DET'),
    (REG_DET, 'REG_DET'),
    (REG_UNREG_DET, 'REG_UNREG_DET'),
    (NON_DET, 'NON_DET')
]

### Battery System
NI_H = {
    'bat' : 'Nickel-Hydrogen',
    'Grav_eng_dens' : 52, # Wh/dm^3
    'Vol_eng_dens' : 65, #Wh/kg
    'Vch' : 1.50, # V
    'Vdis' : 1.25, # V
    'DOD' : 0.35, # %
    'RF' : 1.25,
    'Vmax' : 1.56, # V
    'Cycles' : 40*1e3
}

NI_CD = {
    'bat' : 'Nickel-Cadmium',
    'Grav_eng_dens' : 33, # Wh/dm^3
    'Vol_eng_dens' : 83, #Wh/kg
    'Vch' : 1.45, # V
    'Vdis' : 1.25, # V
    'DOD' : 0.35, # %
    'RF' : 1.25,
    'Vmax' : 1.45, # V
    'Cycles' : 20*1e3
}

AG_ZN = {
    'bat' : 'Silver-Zinc',
    'Grav_eng_dens' : 110, # Wh/kg
    'Vol_eng_dens' : 225, #Wh/dm^3
    'Vch' : 1.92, # V
    'Vdis' : 1.62, # V
    'DOD' : 0.5, # %
    'RF' : 1.25,
    'Vmax' : 2.0, # V
    'Cycles' : 200
}
LI_ION = {
    'bat' : 'Lithium ion',
    'Grav_eng_dens' : 110, # Wh/kg
    'Vol_eng_dens' : 270, #Wh/dm^3
    'Vch' : 4.1, # V
    'Vdis' : 3.75, # V
    'DOD' : 0.70, # %
    'RF' : 1.1, 
    'Vmax' : 4.2, # V
    'Cycles' : 10*1e3 # 
}

BATTERY_TYPE = [
    (LI_ION,'LI_ION'),
    (NI_H,'NI_H'),
    (NI_CD,'NI_CD'),
    (AG_ZN,'AG_ZN')
]

### Define Orbit

LEO_SOLAR_ORBIT = {
    'orbit_type' : 'LEO Polar Orbit 700km',
    'charge_time' : 63.48/60, # hr
    'discharge_time' : 35.28/60, # hr
    'orbit_time' : 98.76/60, # hr
    'solar_distance' : 1.0, #AU
}

LUNAR = {
    'orbit_type' : 'Lunar / Earth Orbit',
    'charge_time' : (6*24-2.1)/2, # hr
    'discharge_time' : 2.1, # hr
    'orbit_time' : 6*24, # hr
    'solar_distance' : 1.0, #AU
}

MARS = {
    'orbit_type' : 'Mars Orbit',
    'charge_time' : 13.89/60.0, # hr
    'discharge_time' : 11.1/60.0, # hr
    'orbit_time' : 25/60, # hr
    'solar_distance' : 1.53, #AU
}

ASTEROID = {
    'orbit_type' : 'Asteroid Belt',
    'charge_time' : 100, # hr
    'discharge_time' : 2, # hr
    'orbit_time' : 0, # hr
    'solar_distance' : 2.6, #AU
}

TRITON = {
    'orbit_type' : 'Triton',
    'charge_time' : 40, # hr
    'discharge_time' : 2, # hr
    'orbit_time' : 0, # hr
    'solar_distance' : 30, #AU
}

ORBIT_TYPE = [
    (LEO_SOLAR_ORBIT,'LEO_SOLAR_ORBIT'),
    (LUNAR, 'LUNAR'),
    (MARS, 'MARS'),
    (ASTEROID, 'ASTEROID'),
    (TRITON, 'TRITON')
]


### Load [W], eclipse [hr], bus_voltage [V]
def calculate_battery(P_load: float,time_sun, time_night, bus_voltage: float, battery_type: BATTERY_TYPE):
    DOD = battery_type['DOD']
    Grav_dens = battery_type['Grav_eng_dens']
    Vol_dens = battery_type['Vol_eng_dens']
    eclipse = time_night/60
    sun_time = time_sun/60
    Vdis = battery_type['Vdis']
    Vch = battery_type['Vch']
    
    battery_capacity = (P_load*eclipse)/(bus_voltage*DOD) # Ah
    
    battery_weight = (bus_voltage*battery_capacity)/Grav_dens # kg
    battery_size = ((bus_voltage*battery_capacity)/Vol_dens)*0.001 # m3
   
    battery_cells = math.ceil(bus_voltage / Vdis)
    battery_ch_voltage = battery_cells * Vch

    expected_life = ((eclipse+sun_time)/(24*365.25))*battery_type['Cycles']

    battery_parameters = {
        'Battery size [m3]': round(battery_size,4),
        'Battery weight [kg]': round(battery_weight,2),
        'Battery capacity [Ah]': round(battery_capacity,2),
        'Battery cells [number]' : battery_cells,
        'Battery charge voltage [V]' : round(battery_ch_voltage,4), 
        'Battery type' : battery_type['bat'],
        'Expected life [yr]' : round(expected_life,2)
    }

    return battery_parameters


def calculate_solararray_EOL(battery_type: BATTERY_TYPE, power_system: POWERSYSTEM_TYPE, P_load: float, solar_array: SOLARARRAY_SYSTEM, time_sun, time_night, distance_sun, bus_voltage: float, cycle_time:float, P_load_ecl: float):
    
    battery_params = calculate_battery(P_load_ecl, time_sun, time_night,bus_voltage=bus_voltage,battery_type=battery_type)

    Vch_bat = battery_params['Battery charge voltage [V]']
    Vch_bat_cell = battery_type['Vch']
    Vdis_bat = bus_voltage
    Vmax_bat_cell = battery_type['Vmax']
    Tch = time_sun
    Tdis = time_night
    RF = battery_type['RF']
    distance = distance_sun
    
    p_sun = round(time_sun*100/(cycle_time*24*60),1)
    p_night = 100.0 - p_sun
    
    ### Power system calculations
    if power_system == 'UNREG_DET':
        eff_u = (Vch_bat_cell/Vmax_bat_cell)
        P_sa = (P_load/eff_u)*(1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*RF)

    elif power_system == 'REG_DET':
        eff_dis = 0.90
        eff_ch = 0.90
        
        P_sa = P_load * (1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*(RF/(eff_dis*eff_ch)))
    
    elif power_system == 'REG_UNREG_DET':
        eff_diode = 0.90
        eff_dis = 0.90

        P_sa = P_load * (1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*(RF/(eff_diode*eff_dis)))

    elif power_system == 'NON_DET':
        eff_ppt = 0.95
        eff_tr = 0.99
        P_sa = (P_load)/(eff_ppt*eff_tr) * (1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*RF)


    ### Defining solar array params
    degradation = solar_array['Degradation']
    Vmp_T = solar_array['Vmp_T_EOL']
    Vmp_T_BOL = solar_array['Vmp_T_BOL']
    Vmp_BOL = solar_array['Vmp_BOL']
    Voc_BOL = solar_array['Voc_BOL']
    Voc_T_BOL = solar_array['Voc_T_BOL']
    Jmp_EOL = solar_array['Jmp']
    Jmp_T = solar_array['Jmp_T_EOL']
    Jmp_T_BOL = solar_array['Jmp_T_BOL']
    Jmp_BOL = solar_array['Jmp_BOL']
    cells_size = solar_array['Solar_size']
    packing_efficiency = solar_array['Packing_eff']
    mass_solar_cell = solar_array['Mass_cell']

    ### Calculating hot / cold cases
    Temp_hot = 125
    Temp_cold = -180
    Temp_nom = 28


    ### Calculating degradation:
    Vmp_deg = Vmp_BOL*degradation # V
    Vmp_temp = Vmp_deg+(Vmp_T*(Temp_hot-Temp_nom)/1000) # V

    ### Calculating voltage needed
    # Defining voltage drops
    V_drop_pwr, V_drop_diode, V_drop_wiring = 3, 0.7, 0.3 # V

    V_drop = V_drop_pwr + V_drop_diode + V_drop_wiring # V
    V_tot = Vch_bat+V_drop # V

    # Number of cells in series in a string
    
    cells = round(V_tot/Vmp_temp)


    # Finding string voltage 
    V_string = cells * (Vmp_deg + Vmp_T*(Temp_hot-Temp_nom)/1000)

    # Finding power lost in system
    P_dissipated = (V_drop_diode + V_drop_wiring)/V_string

    ### Total number of strings required
    # Fiding current density after degradation
    Jmp_deg = Jmp_BOL*Jmp_EOL
    
    # Finding for max temp
    Jmp_hot = Jmp_deg+(Jmp_T*(Temp_hot-Temp_nom)/1000) # A/cm2
    
    
    # Accounting for max solar distance
    Jmp_dist = Jmp_hot * 1/(distance**2) # Inverse square law
    
    # Finding max power needed
    current_min = cells_size * Jmp_dist
    
    pwr_min = (current_min/1000) * V_string * (1 - P_dissipated) 
 
    string_total = round(P_sa/pwr_min)
    
  
    area_solar_array = (cells_size * string_total * cells)/(10000*packing_efficiency) # m2

    mass_solar_array = area_solar_array*mass_solar_cell

    ### Power generated from solar array
    P_sun = 3.856 * 1e26 # W
    distance = distance * 150 * 1e9
    P_solar =  area_solar_array * (P_sun / (4*math.pi*(distance)**2)) * solar_array['Efficiency_EOL']
    Power_diss_solar = P_solar - P_sa
    Power_diss = P_sa - P_load
    Tot_diss = Power_diss + Power_diss_solar

    perc_diss = (Tot_diss / P_solar) * 100 
  
    total_mass = (mass_solar_array + battery_params['Battery weight [kg]'])
    
    ### Calculating maximum power and voltage at BOL - maybe not needed
    Voc_BOL_cold = cells * (Voc_BOL + Voc_T_BOL*(Temp_cold-Temp_nom)/1000)
    Vmp_BOL_cold = cells * (Vmp_BOL + Vmp_T_BOL*(Temp_cold-Temp_nom)/1000)
    Imp_cold = cells_size * (Jmp_BOL + Jmp_T_BOL*(Temp_cold-Temp_nom)/1000)/1000
  
  
    
    Maximum_power_recieved = string_total * Vmp_BOL_cold * Imp_cold

    solar = {
        'Load power required [W]' : P_load,
        'Average power system required power [W]' : round(P_sa,1),
        'Power dissipated in the system [W]' : round(Power_diss,1),
        'Solar array size [m2]' : round(area_solar_array,1),
        'Mass of solar array [kg]' : round(mass_solar_array,1),
        'Total power generated by solar array [W]' : round(P_solar,1),
        #'Maximum power generated by solar array [W]' : round(Maximum_power_recieved,1),
        'Power dissipation in solar array [W]' : round(Power_diss_solar,1),
        'Total power dissipation [W]' : round(Tot_diss, 1),
        #'Percentage of power dissipated [%]' : round(perc_diss,1),
        'Total weight of power system [kg]' : round(total_mass, 1) 
    }
    static_specs = {
        'Distance from the Sun [AU]' : distance_sun,
        'Cycle [days]' : cycle_time,
        'Percentage of time in sunlight [%]' : p_sun,
        'Percentage of time in darkness [%]' : p_night,
        'Solar Panel Type' : solar_array['Solar_type'], 
        'Solar Panel Efficiency [%]' : solar_array['Efficiency_BOL']*1e2,
        'Battery Type' : battery_type['bat']
        }
 
    bat_params = {
        'Battery Size [m3]' : round(battery_params['Battery size [m3]'],2),
        'Battery weight [kg]' : round(battery_params['Battery weight [kg]'],1),
        'Battery capacity [Ah]' : round(battery_params['Battery capacity [Ah]'],1),
        'Battery charge voltage [V]' : battery_params['Battery charge voltage [V]'],
        'Expected life based on DOD [yr]' : round(battery_params['Expected life [yr]'],0)
    }


    specs = static_specs, dict(list(bat_params.items()) + list(solar.items()))
    return specs


def calculate_solararray_BOL(battery_type: BATTERY_TYPE, power_system: POWERSYSTEM_TYPE, P_load: float, solar_array: SOLARARRAY_SYSTEM,time_sun, time_night, distance_sun, bus_voltage: float, cycle_time: float, P_load_ecl:float):
    
    battery_params = calculate_battery(P_load_ecl,time_sun, time_night, bus_voltage=bus_voltage,battery_type=battery_type)

    Vch_bat = battery_params['Battery charge voltage [V]']
    Vch_bat_cell = battery_type['Vch']
    Vdis_bat = bus_voltage
    Vmax_bat_cell = battery_type['Vmax']
    Tch = time_sun
    Tdis = time_night
    RF = battery_type['RF']
    distance = distance_sun

    p_sun = round(time_sun*100/(cycle_time*24*60),1)
    p_night = 100.0 - p_sun
    
    ### Power system calculations
    if power_system == 'UNREG_DET':
        eff_u = (Vch_bat_cell/Vmax_bat_cell)
        P_sa = (P_load/eff_u)*(1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*RF)

    elif power_system == 'REG_DET':
        eff_dis = 0.90
        eff_ch = 0.90
        
        P_sa = P_load * (1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*(RF/(eff_dis*eff_ch)))
    
    elif power_system == 'REG_UNREG_DET':
        eff_diode = 0.90
        eff_dis = 0.90

        P_sa = P_load * (1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*(RF/(eff_diode*eff_dis)))

    elif power_system == 'NON_DET':
        eff_ppt = 0.95
        eff_tr = 0.99

        P_sa = (P_load)/(eff_ppt*eff_tr) * (1+((Tdis*Vch_bat)/(Tch*Vdis_bat))*RF)

    
    ### Defining solar array params
    Vmp_T = solar_array['Vmp_T_BOL']
    Voc_BOL = solar_array['Voc_BOL']
    Voc_T_BOL = solar_array['Voc_T_BOL']
    Vmp_BOL = solar_array['Vmp_BOL']
    Jmp_T = solar_array['Jmp_T_BOL']
    Jmp_BOL = solar_array['Jmp_BOL']
    cells_size = solar_array['Solar_size']
    packing_efficiency = solar_array['Packing_eff']
    mass_solar_cell = solar_array['Mass_cell']

    ### Calculating hot / cold cases
    Temp_hot = 125
    Temp_cold = -180
    Temp_nom = 28


    ### Calculating degradation:
    Vmp_deg = Vmp_BOL # V
    Vmp_temp = Vmp_deg+(Vmp_T*(Temp_hot-Temp_nom)/1000) # V

    ### Calculating voltage needed
    # Defining voltage drops
    V_drop_pwr, V_drop_diode, V_drop_wiring = 3, 0.7, 0.3 # V

    V_drop = V_drop_pwr + V_drop_diode + V_drop_wiring # V
    V_tot = Vch_bat+V_drop # V

    # Number of cells in series in a string
    cells = round(V_tot/Vmp_temp)


    # Finding string voltage 
    V_string = cells * (Vmp_deg + Vmp_T*(Temp_hot-Temp_nom)/1000)

    # Finding power lost in system
    P_dissipated = (V_drop_diode + V_drop_wiring)/V_string

    ### Total number of strings required
    # Fiding current density after degradation
    Jmp_deg = Jmp_BOL
    
    # Finding for max temp
    Jmp_hot = Jmp_deg+(Jmp_T*(Temp_hot-Temp_nom)/1000) # A/cm2
    
    
    # Accounting for max solar distance
    Jmp_dist = Jmp_hot * 1/(distance**2) # Inverse square law
    
    # Finding max power needed
    current_min = cells_size * Jmp_dist

    pwr_min = current_min/1000 * V_string * (1 - P_dissipated) 

    string_total = round(P_sa/pwr_min)
    
    area_solar_array = (cells_size * string_total * cells)/(10000*packing_efficiency) # m2

    mass_solar_array = (cells_size * string_total * cells)*mass_solar_cell

    ### Power generated from solar array
    P_sun = 3.856 * 1e26 # W
    distance = distance * 150 * 1e9
    P_solar =  area_solar_array * (P_sun / (4*math.pi*(distance)**2)) * solar_array['Efficiency_EOL']
    Power_diss_solar = P_solar - P_sa
    Power_diss = P_sa - P_load
    Tot_diss = Power_diss + Power_diss_solar

    perc_diss = (Tot_diss / P_solar) * 100 

    total_mass = (mass_solar_array + battery_params['Battery weight [kg]']) 

    ### Calculating maximum power and voltage at BOL - maybe not needed
    Voc_BOL_cold = cells * (Voc_BOL + Voc_T_BOL*(Temp_cold-Temp_nom)/1000) 
    Vmp_BOL_cold = cells * (Vmp_BOL + Vmp_T*(Temp_cold-Temp_nom)/1000) 
    Imp_cold = cells_size * ((Jmp_BOL + Jmp_T*(Temp_cold-Temp_nom)/1000)/1000) 
    print("This is power diss: ",Power_diss)
    Maximum_power_recieved = string_total * Vmp_BOL_cold * Imp_cold
    
    solar = {
        'Load power required [W]' : P_load,
        'Average power system required power [W]' : round(P_sa,1),
        'Power dissipated in the system [W]' : round(Power_diss,1),
        'Solar array size [m2]' : round(area_solar_array,1),
        'Mass of solar array [kg]' : round(mass_solar_array,1),
        'Total power generated by solar array [W]' : round(P_solar,1),
        #'Maximum power generated by solar array [W]' : round(Maximum_power_recieved,1),
        'Power dissipation in solar array [W]' : round(Power_diss_solar,1),
        'Total power dissipation [W]' : round(Tot_diss, 1),
        #'Percentage of power dissipated [%]' : round(perc_diss,1),
        'Total weight of power system [kg]' : round(total_mass, 1) 
    }
    static_specs = {
        'Distance from the Sun [AU]' : distance_sun,
        'Cycle [days]' : cycle_time,
        'Percentage of time in sunlight [%]' : p_sun,
        'Percentage of time in darkness [%]' : p_night,
        'Solar Panel Type' : solar_array['Solar_type'], 
        'Solar Panel Efficiency [%]' : solar_array['Efficiency_BOL']*1e2,
        'Battery Type' : battery_type['bat']
        }
 
    bat_params = {
        'Battery Size [m3]' : round(battery_params['Battery size [m3]'],2),
        'Battery weight [kg]' : round(battery_params['Battery weight [kg]'],1),
        'Battery capacity [Ah]' : round(battery_params['Battery capacity [Ah]'],1),
        'Battery charge voltage [V]' : battery_params['Battery charge voltage [V]'],
        'Expected life based on DOD [yr]' : round(battery_params['Expected life [yr]'],0)
    }

    specs = static_specs, dict(list(bat_params.items()) + list(solar.items()))
    return specs


#print(type(LI_ION),type(REG_DET),type(XTJ_PRIME),type(LEO_SOLAR_ORBIT))
#specs = calculate_solararray(LI_ION,REG_DET,1700, XTJ_PRIME,LEO_SOLAR_ORBIT,bus_voltage = 28)

#print("{" + "\n".join("{!r}: {!r},".format(k, v) for k, v in specs.items()) + "}")



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 893)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.calc = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.select())
        self.calc.setGeometry(QtCore.QRect(910, 810, 161, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.calc.setFont(font)
        self.calc.setObjectName("calc")
        self.power_system_title = QtWidgets.QTextBrowser(self.centralwidget)
        self.power_system_title.setEnabled(True)
        self.power_system_title.setGeometry(QtCore.QRect(180, 20, 281, 41))
        self.power_system_title.setTabletTracking(False)
        self.power_system_title.setAcceptDrops(True)
        self.power_system_title.setAutoFillBackground(False)
        self.power_system_title.setAcceptRichText(True)
        self.power_system_title.setOpenLinks(True)
        self.power_system_title.setObjectName("power_system_title")
        self.solar_title = QtWidgets.QTextBrowser(self.centralwidget)
        self.solar_title.setEnabled(True)
        self.solar_title.setGeometry(QtCore.QRect(490, 20, 281, 41))
        self.solar_title.setTabletTracking(False)
        self.solar_title.setAcceptDrops(True)
        self.solar_title.setAutoFillBackground(False)
        self.solar_title.setAcceptRichText(True)
        self.solar_title.setOpenLinks(True)
        self.solar_title.setObjectName("solar_title")
        self.battery_title = QtWidgets.QTextBrowser(self.centralwidget)
        self.battery_title.setEnabled(True)
        self.battery_title.setGeometry(QtCore.QRect(800, 20, 281, 41))
        self.battery_title.setTabletTracking(False)
        self.battery_title.setAcceptDrops(True)
        self.battery_title.setAutoFillBackground(False)
        self.battery_title.setAcceptRichText(True)
        self.battery_title.setOpenLinks(True)
        self.battery_title.setObjectName("battery_title")
        self.params_title = QtWidgets.QTextBrowser(self.centralwidget)
        self.params_title.setEnabled(True)
        self.params_title.setGeometry(QtCore.QRect(20, 240, 251, 41))
        self.params_title.setTabletTracking(False)
        self.params_title.setAcceptDrops(True)
        self.params_title.setAutoFillBackground(False)
        self.params_title.setAcceptRichText(True)
        self.params_title.setOpenLinks(True)
        self.params_title.setObjectName("params_title")
        self.power_system_box = QtWidgets.QGroupBox(self.centralwidget)
        self.power_system_box.setGeometry(QtCore.QRect(180, 70, 281, 141))
        self.power_system_box.setTitle("")
        self.power_system_box.setObjectName("power_system_box")
        self.reg_det = QtWidgets.QRadioButton(self.power_system_box)
        self.reg_det.setChecked(True)
        self.reg_det.setGeometry(QtCore.QRect(10, 0, 131, 31))
        self.reg_det.setObjectName("reg_det")
        self.unreg_det = QtWidgets.QRadioButton(self.power_system_box)
        self.unreg_det.setGeometry(QtCore.QRect(10, 30, 131, 31))
        self.unreg_det.setObjectName("unreg_det")
        self.reg_sun = QtWidgets.QRadioButton(self.power_system_box)
        self.reg_sun.setGeometry(QtCore.QRect(10, 60, 221, 31))
        self.reg_sun.setObjectName("reg_sun")
        self.non_det = QtWidgets.QRadioButton(self.power_system_box)
        self.non_det.setGeometry(QtCore.QRect(10, 90, 131, 31))
        self.non_det.setObjectName("non_det")
        self.solar_panels_box = QtWidgets.QGroupBox(self.centralwidget)
        self.solar_panels_box.setGeometry(QtCore.QRect(490, 70, 281, 141))
        self.solar_panels_box.setTitle("")
        self.solar_panels_box.setObjectName("solar_panels_box")
        self.XTJ_PRIME = QtWidgets.QRadioButton(self.solar_panels_box)
        self.XTJ_PRIME.setChecked(True)
        self.XTJ_PRIME.setGeometry(QtCore.QRect(10, 0, 261, 31))
        self.XTJ_PRIME.setObjectName("XTJ_PRIME")
        self.AZUR_SPACE = QtWidgets.QRadioButton(self.solar_panels_box)
        self.AZUR_SPACE.setGeometry(QtCore.QRect(10, 30, 261, 31))
        self.AZUR_SPACE.setObjectName("AZUR_SPACE")
        self.battery_box = QtWidgets.QGroupBox(self.centralwidget)
        self.battery_box.setGeometry(QtCore.QRect(800, 70, 281, 141))
        self.battery_box.setTitle("")
        self.battery_box.setObjectName("battery_box")
        self.LI_ION = QtWidgets.QRadioButton(self.battery_box)
        self.LI_ION.setChecked(True)
        self.LI_ION.setGeometry(QtCore.QRect(10, 0, 131, 31))
        self.LI_ION.setObjectName("LI_ION")
        self.NI_H = QtWidgets.QRadioButton(self.battery_box)
        self.NI_H.setGeometry(QtCore.QRect(10, 30, 131, 31))
        self.NI_H.setObjectName("NI_H")
        self.NI_H_2 = QtWidgets.QRadioButton(self.battery_box)
        self.NI_H_2.setGeometry(QtCore.QRect(10, 60, 131, 31))
        self.NI_H_2.setObjectName("NI_H_2")
        self.AG_Zn = QtWidgets.QRadioButton(self.battery_box)
        self.AG_Zn.setGeometry(QtCore.QRect(10, 90, 131, 31))
        self.AG_Zn.setObjectName("AG_Zn")
        self.calc_params_title = QtWidgets.QTextBrowser(self.centralwidget)
        self.calc_params_title.setEnabled(True)
        self.calc_params_title.setGeometry(QtCore.QRect(580, 240, 251, 41))
        self.calc_params_title.setTabletTracking(False)
        self.calc_params_title.setAcceptDrops(True)
        self.calc_params_title.setAutoFillBackground(False)
        self.calc_params_title.setAcceptRichText(True)
        self.calc_params_title.setOpenLinks(True)
        self.calc_params_title.setObjectName("calc_params_title")
        self.calculated_values_box = QtWidgets.QTableWidget(self.centralwidget)
        self.calculated_values_box.setGeometry(QtCore.QRect(580, 290, 491, 445))
        self.calculated_values_box.setObjectName("calculated_values_box")
        self.calculated_values_box.setColumnCount(1)
        self.calculated_values_box.setRowCount(14)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.calculated_values_box.setHorizontalHeaderItem(0, item)
        self.calculated_values_box.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.given_values_box = QtWidgets.QTableWidget(self.centralwidget)
        
        self.given_values_box.setGeometry(QtCore.QRect(20, 290, 531, 235))
        self.given_values_box.setObjectName("given_values_box")
        self.given_values_box.setColumnCount(1)
        self.given_values_box.setRowCount(7)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.given_values_box.setHorizontalHeaderItem(0, item)
        self.given_values_box.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.linePower = QtWidgets.QLineEdit(self.centralwidget)
        self.linePower.setGeometry(QtCore.QRect(20, 839, 161, 31))
        self.linePower.setObjectName("linePower")
        self.linePower.setText('1500')
        self.lineBus = QtWidgets.QLineEdit(self.centralwidget)
        self.lineBus.setGeometry(QtCore.QRect(420, 840, 131, 31))
        self.lineBus.setObjectName("lineBus")
        self.lineBus.setText('28')
        self.linePower_eclipse = QtWidgets.QLineEdit(self.centralwidget)
        self.linePower_eclipse.setGeometry(QtCore.QRect(190, 840, 221, 31))
        self.linePower_eclipse.setObjectName("linePower_eclipse")
        self.power_load_eclipse = QtWidgets.QTextBrowser(self.centralwidget)
        self.power_load_eclipse.setEnabled(True)
        self.power_load_eclipse.setGeometry(QtCore.QRect(190, 800, 221, 31))
        self.power_load_eclipse.setObjectName("power_load_eclipse")
        self.linePower_eclipse.setText('200')
        self.power_load = QtWidgets.QTextBrowser(self.centralwidget)
        self.power_load.setEnabled(True)
        self.power_load.setGeometry(QtCore.QRect(20, 800, 161, 31))
        self.power_load.setTabletTracking(False)
        self.power_load.setAcceptDrops(True)
        self.power_load.setAutoFillBackground(False)
        self.power_load.setAcceptRichText(True)
        self.power_load.setOpenLinks(True)
        self.power_load.setObjectName("power_load")
        self.cycle_days = QtWidgets.QTextBrowser(self.centralwidget)
        self.cycle_days.setEnabled(True)
        self.cycle_days.setGeometry(QtCore.QRect(280, 720, 151, 31))
        self.cycle_days.setTabletTracking(False)
        self.cycle_days.setAcceptDrops(True)
        self.cycle_days.setAutoFillBackground(False)
        self.cycle_days.setAcceptRichText(True)
        self.cycle_days.setOpenLinks(True)
        self.cycle_days.setObjectName("cycle_days")
        self.bol_eol = QtWidgets.QGroupBox(self.centralwidget)
        self.bol_eol.setGeometry(QtCore.QRect(580, 750, 531, 41))
        self.bol_eol.setTitle("")
        self.bol_eol.setObjectName("bol_eol")
        self.radioButton = QtWidgets.QRadioButton(self.bol_eol)
        self.radioButton.setGeometry(QtCore.QRect(10, 10, 141, 17))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.setChecked(True)
        self.radioButton_2 = QtWidgets.QRadioButton(self.bol_eol)
        self.radioButton_2.setGeometry(QtCore.QRect(170, 10, 141, 17))
        self.radioButton_2.setObjectName("radioButton_2")
        
        
        
        self.image_box = QtWidgets.QGraphicsView(self.centralwidget)

        # Adjust position and size
        self.image_box.setGeometry(QtCore.QRect(20, 20, 141, 141))

        # Set object name
        self.image_box.setObjectName("image_box")
        self.image_box.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.image_box.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # Create QGraphicsScene
        self.scene = QtWidgets.QGraphicsScene()
        pixmap = QtGui.QPixmap('C:/Users/hasse/OneDrive - Danmarks Tekniske Universitet/10. semester/30320 Spacecraft Instrumentation Systems/power_gui/dtu-space-icon.jpg')  # Make sure the path is correct
        pixmap = pixmap.scaled(QtCore.QSize(250, 250), QtCore.Qt.KeepAspectRatio)
        pic = QtWidgets.QGraphicsPixmapItem(pixmap)
        self.scene.addItem(pic)
        self.image_box.setScene(self.scene)

        
        
        
        
        self.sunlight_percentage = QtWidgets.QTextBrowser(self.centralwidget)
        self.sunlight_percentage.setEnabled(True)
        self.sunlight_percentage.setGeometry(QtCore.QRect(440, 720, 111, 31))
        self.sunlight_percentage.setTabletTracking(False)
        self.sunlight_percentage.setAcceptDrops(True)
        self.sunlight_percentage.setAutoFillBackground(False)
        self.sunlight_percentage.setAcceptRichText(True)
        self.sunlight_percentage.setOpenLinks(True)
        self.sunlight_percentage.setObjectName("sunlight_percentage")
        self.sunlight_percentage_text = QtWidgets.QLineEdit(self.centralwidget)
        self.sunlight_percentage_text.setEnabled(True)
        self.sunlight_percentage_text.setGeometry(QtCore.QRect(440, 760, 111, 31))
        self.sunlight_percentage_text.setObjectName("sunlight_percentage_text")
        self.sunlight_percentage_text.setText('50')
        self.cycle_days_text = QtWidgets.QLineEdit(self.centralwidget)
        self.cycle_days_text.setEnabled(True)
        self.cycle_days_text.setGeometry(QtCore.QRect(280, 760, 151, 31))
        self.cycle_days_text.setObjectName("cycle_days_text")
        self.cycle_days_text.setText('1')
        self.distance_sun = QtWidgets.QTextBrowser(self.centralwidget)
        self.distance_sun.setEnabled(True)
        self.distance_sun.setGeometry(QtCore.QRect(20, 720, 251, 31))
        self.distance_sun.setTabletTracking(False)
        self.distance_sun.setAcceptDrops(True)
        self.distance_sun.setAutoFillBackground(False)
        self.distance_sun.setAcceptRichText(True)
        self.distance_sun.setOpenLinks(True)
        self.distance_sun.setObjectName("distance_sun")
        self.distance_sun_text = QtWidgets.QLineEdit(self.centralwidget)
        self.distance_sun_text.setEnabled(True)
        self.distance_sun_text.setGeometry(QtCore.QRect(20, 760, 251, 31))
        self.distance_sun_text.setObjectName("distance_sun_text")
        self.distance_sun_text.setText('1')
        self.bus_voltage = QtWidgets.QTextBrowser(self.centralwidget)
        self.bus_voltage.setEnabled(True)
        self.bus_voltage.setGeometry(QtCore.QRect(420, 800, 131, 31))
        self.bus_voltage.setTabletTracking(False)
        self.bus_voltage.setAcceptDrops(True)
        self.bus_voltage.setAutoFillBackground(False)
        self.bus_voltage.setAcceptRichText(True)
        self.bus_voltage.setOpenLinks(True)
        self.bus_voltage.setObjectName("bus_voltage")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Power Calculator"))
        self.calc.setText(_translate("MainWindow", "Calculate"))
        self.power_system_title.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Choose Power System</span></p></body></html>"))
        self.solar_title.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Choose solar panels</span></p></body></html>"))
        self.battery_title.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Choose batteries</span></p></body></html>"))
        self.params_title.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">Given Values</span></p></body></html>"))
        self.reg_det.setText(_translate("MainWindow", "Regulated DET"))
        self.unreg_det.setText(_translate("MainWindow", "Unregulated DET"))
        self.reg_sun.setText(_translate("MainWindow", "Regulated sunlight, unregulated eclipse"))
        self.non_det.setText(_translate("MainWindow", "Non-DET"))
        self.XTJ_PRIME.setText(_translate("MainWindow", "XTJ Prime"))
        self.AZUR_SPACE.setText(_translate("MainWindow", "4G32C-Adv, AZUR Space"))
        self.LI_ION.setText(_translate("MainWindow", "Lithium Ion"))
        self.NI_H.setText(_translate("MainWindow", "Nickle Hydrogen"))
        self.NI_H_2.setText(_translate("MainWindow", "Nickle Cadmium"))
        self.AG_Zn.setText(_translate("MainWindow", "Silver Zinc"))
        self.calc_params_title.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">Calculated Values</span></p></body></html>"))
        item = self.calculated_values_box.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Battery Size [m3]"))
        item = self.calculated_values_box.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "Battery Weight [kg]"))
        item = self.calculated_values_box.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "Battery Capacity [Ah]"))
        item = self.calculated_values_box.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "Battery Charge Voltage [V]"))
        item = self.calculated_values_box.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "Battery life based on DOD [yr]"))
        item = self.calculated_values_box.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "Load Power Required [W]"))
        item = self.calculated_values_box.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "Average Power System Required Power [W]"))
        item = self.calculated_values_box.verticalHeaderItem(7)
        item.setText(_translate("MainWindow", "Power Dissipated in the Power System [W]"))
        item = self.calculated_values_box.verticalHeaderItem(8)
        item.setText(_translate("MainWindow", "Solar Array Size [m2]"))
        item = self.calculated_values_box.verticalHeaderItem(9)
        item.setText(_translate("MainWindow", "Mass of Solar Array [kg]"))
        item = self.calculated_values_box.verticalHeaderItem(10)
        item.setText(_translate("MainWindow", "Total Power Generated by Solar Array [W]"))
        item = self.calculated_values_box.verticalHeaderItem(11)
        item.setText(_translate("MainWindow", "Power Dissipated by Solar Array [W]"))
        item = self.calculated_values_box.verticalHeaderItem(12)
        item.setText(_translate("MainWindow", "Total Power Dissipation [W]"))
        item = self.calculated_values_box.verticalHeaderItem(13)
        item.setText(_translate("MainWindow", "Total Weight of the Power System [kg]"))
        item = self.calculated_values_box.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Value"))
        item = self.given_values_box.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Distance from the Sun [AU]"))
        item = self.given_values_box.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "Cycle [days]"))
        item = self.given_values_box.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "Percentage of time in sunlight [%]"))
        item = self.given_values_box.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "Percentage of time in darkness [%]"))
        item = self.given_values_box.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "Solar Panel Type"))
        item = self.given_values_box.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "Solar Panel Efficiency [%]"))
        item = self.given_values_box.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "Battery Type"))
        item = self.given_values_box.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Value"))
        self.power_load.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Power Load Value [W]</span></p></body></html>"))
        self.cycle_days.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Choose cycle [days]</span></p></body></html>"))
        self.radioButton.setText(_translate("MainWindow", "Beginning of life (BOL)"))
        self.radioButton_2.setText(_translate("MainWindow", "End of life (EOL)"))
        self.sunlight_percentage.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Sunlight [%] </span></p></body></html>"))
        """self.sunlight_percentage.setStyle(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))"""
        
        self.distance_sun.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Average distance from the Sun [AU]</span></p></body></html>"))
        
        self.bus_voltage.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Bus Voltage [V]</span></p></body></html>"))

        self.power_load_eclipse.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Power Load Value Eclipse [W]</span></p></body></html>"))

    def select(self):
        if self.reg_det.isChecked():
            pwr_sys = REG_DET
        elif self.unreg_det.isChecked():
            pwr_sys = UNREG_DET
        elif self.reg_sun.isChecked():
            pwr_sys = REG_UNREG_DET
        elif self.non_det.isChecked():
            pwr_sys = NON_DET
        
        """if self.LEO.isChecked():
            orbit = LEO_SOLAR_ORBIT
        elif self.Lunar.isChecked():
            orbit = LUNAR
        elif self.Mars.isChecked():
            orbit = MARS
        elif self.Asteriod.isChecked():
            orbit = ASTEROID
        elif self.Triton.isChecked():
            orbit = TRITON"""
    
    
        if self.XTJ_PRIME.isChecked():
            solar = XTJ_PRIME
        elif self.AZUR_SPACE.isChecked():
            solar = AZUR_SPACE

        if self.LI_ION.isChecked():
            battery = LI_ION
        elif self.NI_H.isChecked():
            battery = NI_H
        elif self.NI_H_2.isChecked():
            battery = NI_CD
        elif self.AG_Zn.isChecked():
            battery = AG_ZN

        load = float(self.linePower.text())
        bus_V = float(self.lineBus.text())
        load_eclipse = float(self.linePower_eclipse.text())
        cycle = float(self.cycle_days_text.text())
        percentage_day = float(self.sunlight_percentage_text.text()) 
        percentage_night = 100.0 - percentage_day
        cycle_time = cycle*24*60 # in minutes
        time_sun = cycle_time*percentage_day / 100.0
        time_night = cycle_time*percentage_night / 100.0
        distance = float(self.distance_sun_text.text())
        
        if self.radioButton.isChecked():
            params = calculate_solararray_BOL(battery,pwr_sys,load,solar,time_sun, time_night, distance,bus_V,cycle,load_eclipse)
        elif self.radioButton_2.isChecked():
            params = calculate_solararray_EOL(battery,pwr_sys,load,solar,time_sun, time_night, distance,bus_V,cycle,load_eclipse)



        static = list(params[0].values())
        dynamic = list(params[1].values())
        
        for i in range(len(static)):
            a = static[i]
            self.given_values_box.setItem(i,0,QtWidgets.QTableWidgetItem(str(a)))

        for i in range(len(dynamic)):
            a = dynamic[i]
            self.calculated_values_box.setItem(i,0,QtWidgets.QTableWidgetItem(str(a)))
               

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
